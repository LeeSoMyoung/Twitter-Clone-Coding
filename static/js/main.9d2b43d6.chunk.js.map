{"version":3,"sources":["firebaseInstance.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","REACT_APP_APP_ID","firebase","initializeApp","fbInstance","dbService","firestore","authService","auth","storageService","storage","AuthFrom","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newText","setNewText","onDeleteClick","window","confirm","attachmentUrl","refFromURL","delete","doc","id","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","nweetObj","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","opacity","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetsArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","currentUser","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d2b43d6.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fbInstance = firebase;\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const storageService = firebase.storage();","import React, { useState } from 'react';\r\nimport { authService } from 'firebaseInstance';\r\n\r\nconst inputStyles = {};\r\n\r\nconst AuthFrom = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    \r\n    const onChange = (event) => {\r\n        const {\r\n            target: { name, value }\r\n        } = event;\r\n\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        }\r\n        else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault(); // SPA이므로 refresh되어 정보들이 사라지는 것을 방지\r\n\r\n        try {\r\n\r\n            let data;\r\n\r\n            if (newAccount) {\r\n                // 새 계정 만들기\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }\r\n            else {\r\n                // 로그인 폼 submit\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n\r\n        }\r\n        catch (error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"email\" placeholder=\"email\" \r\n                    required\r\n                    value={email}\r\n                    onChange={onChange}\r\n                    className=\"authInput\" />\r\n                <input\r\n                    name=\"password\"\r\n                    type=\"password\" placeholder=\"password\" required\r\n                    value={password}\r\n                    onChange={onChange}\r\n                    className=\"authInput\" />\r\n                \r\n                <input\r\n                type=\"submit\" \r\n                className=\"authInput authSubmit\"\r\n                value={newAccount ? \"회원가입\" : \"로그인\"} />\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">\r\n                {newAccount ? \"로그인\" : \"계정 생성하기\"}\r\n            </span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthFrom;","import AuthFrom from 'components/AuthForm';\r\nimport { authService, fbInstance } from 'firebaseInstance';\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTwitter,\r\n    faGoogle,\r\n    faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n\r\n        const {\r\n            target: {\r\n                name\r\n            },\r\n        } = event;\r\n\r\n        let provider;\r\n        if (name === \"google\") {\r\n            // 구글로 로그인하기가 클릭 되었을 때\r\n            provider = new fbInstance.auth.GoogleAuthProvider();\r\n\r\n        }\r\n        else if (name === \"github\") {\r\n            // 깃허브로 로그인하기가 클릭되었을 때\r\n            provider = new fbInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthFrom />\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Continue with Google\r\n                    <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Continue with Github\r\n                    <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import { dbService, storageService } from 'firebaseInstance';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newText, setNewText] = useState(tweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"정말 이 트윗을 삭제하시겠습니까?\");\r\n        if (ok) {\r\n            if (tweetObj.attachmentUrl !== \"\") {\r\n                // 사진이 존재하면 Storage에서 먼저 삭제하고\r\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n            }\r\n            // 트윗을 삭제한다.\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n\r\n        }\r\n    }\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`tweets/${tweetObj.id}`)\r\n            .update({\r\n                text: newText\r\n            });\r\n        setEditing(false);\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n\r\n        setNewText(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tweet\">\r\n            {\r\n                editing ?\r\n                    // 수정하기 버튼을 누르면 form이 떠야한다.\r\n                    (\r\n                        <>\r\n                            <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"수정된 내용을 적으세요!\"\r\n                                    value={newText}\r\n                                    onChange={onChange}\r\n                                    autoFocus\r\n                                    className=\"formInput\"\r\n                                    required />\r\n                                <input type=\"submit\"\r\n                                    className=\"formBtn\"\r\n                                    value=\"트윗 수정하기\" />\r\n                            </form>\r\n                            <button\r\n                                onClick={toggleEditing}\r\n                                className=\"formBtn cancelBtn\">취소</button>\r\n                        </>\r\n                    )\r\n                    :\r\n                    // 수정하기가 아니면 트윗 리스트를 보여준다.\r\n                    (\r\n                        <div>\r\n                            <h4>{tweetObj.text}</h4>\r\n                            {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n                            {\r\n                                isOwner && (\r\n                                    <div class=\"tweet__actions\">\r\n                                        <span onClick={onDeleteClick}>\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </span>\r\n                                        <span onClick={toggleEditing}>\r\n                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                        </span>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Tweet;\r\n\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { dbService, storageService } from 'firebaseInstance';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n\r\n    const TWEETS_KEY = \"tweets\";\r\n\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        if (tweet === \"\") {\r\n            // 빈 트윗 작성시, 아무런 조치를 취하지 않고 메소드를 종료시킨다.\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService\r\n                .ref()\r\n                .child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const nweetObj = {\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        };\r\n        await dbService.collection(TWEETS_KEY).add(nweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setTweet(value);\r\n    };\r\n    const onFileChange = (event) => {\r\n        const {\r\n            target: { files },\r\n        } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {\r\n                currentTarget: { result },\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n\r\n    const onClearAttachment = () => setAttachment(null);\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                    value={tweet}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    className=\"factoryInput__input\"\r\n                    placeholder=\"지금 무얼 하고 있나요?\"\r\n                    maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n\r\n            <label for=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>이미지 추가하기</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n\r\n            <input\r\n                id=\"attach-file\"\r\n                style={{\r\n                    opacity: 0,\r\n                }}\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange} />\r\n            <input type=\"submit\" value=\"트윗하기\" />\r\n            {attachment && (\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img\r\n                        src={attachment}\r\n                        style={{\r\n                            backgroundImage: attachment,\r\n                        }}\r\n                    />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TweetFactory;","import Tweet from 'components/Tweet';\r\nimport { dbService } from 'firebaseInstance';\r\nimport React, { useEffect, useState } from 'react';\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n\r\n    const TWEETS_KEY = \"tweets\";\r\n\r\n    const [tweets, setTweets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dbService.collection(TWEETS_KEY).onSnapshot((snapshot) => {\r\n            const tweetsArray = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n\r\n            setTweets(tweetsArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <TweetFactory userObj={userObj} />\r\n            <div style={{ marginTop: 30 }}>\r\n                {tweets.map((tweet) => (\r\n                    <Tweet key={tweet.id} tweetObj={tweet} isOwner={tweet.creatorId === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n            <Link to=\"/\" style={{ marginRight: 10 }}>\r\n                <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n            </Link>\r\n        </li>\r\n        <li>\r\n            <Link\r\n                to=\"/profile\"\r\n                style={{\r\n                    marginLeft: 10,\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    fontSize: 12,\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n                <span style={{ marginTop: 10 }}>\r\n                    {userObj.displayName\r\n                        ? `${userObj.displayName}의 Profile`\r\n                        : \"Profile\"}\r\n                </span>\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n</nav>;\r\n\r\nexport default Navigation;","import { authService, dbService } from 'firebaseInstance';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const TWEETS_KEY = \"tweets\";\r\n\r\n    const onLogOutClick = ({ userObj }) => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    /*const getMyTweets = async () => {\r\n        const tweets = await dbService.collection(TWEETS_KEY)\r\n            .where(\"creatorId\", \"==\", userObj.uid)\r\n            .orderBy(\"createAt\", \"desc\")\r\n            .get();\r\n\r\n        console.log(tweets.docs.map((doc) => doc.data()));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyTweets();\r\n\r\n    }, []);\r\n*/\r\n    const onChange = async (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (userObj.displayName !== newDisplayName) {\r\n            // 바꿀 이름이 기존 이름과 다르면 업데이트 시킨다.\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n\r\n            refreshUser();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input type=\"text\"\r\n                    onChange={onChange}\r\n                    autoFocus\r\n                    value={newDisplayName}\r\n                    className=\"formInput\"\r\n                    placeholder=\"바꾸실 이름을 입력하세요.\" />\r\n                <input type=\"submit\"\r\n                    value=\"프로필 업데이트하기\"\r\n                    className=\"formBtn\"\r\n                    style={{\r\n                        marginTop: 10,\r\n                    }} />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                로그아웃\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, { useState } from 'react';\r\nimport { HashRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Navigation from 'components/Navigation';\r\nimport Profile from 'routes/Profile';\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>\r\n                {isLoggedIn ?\r\n                    // 로그인 되었을 때 : 홈 화면을 표시한다.\r\n                    <div\r\n                        style={{\r\n                            maxWidth: 890,\r\n                            width: \"100%\",\r\n                            margin: \"0 auto\",\r\n                            marginTop: 80,\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj} />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile\r\n                                refreshUser={refreshUser}\r\n                                userObj={userObj} />\r\n                        </Route>\r\n                    </div>\r\n                    :\r\n                    // 로그인이 안 되어 있을 때 : 로그인 화면을 표시한다.\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                    </ >\r\n                };\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'firebaseInstance';\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n\n  const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // 로그인 됐을 때 메인 화면을 띄우기 위해\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid:user.uid,\n          updateProfile: (args) =>user.updateProfile(args),\n        });\n      }\n      else {\n        // 로그아웃 시 로그인 화면을 띄우기 위해\n        setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n\n    const user = authService.currentUser;\n\n    setUserObj({\n      displayName: user.displayName,\n      uid:user.uid,\n      updateProfile: (args) =>user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? <AppRouter\n        refreshUser={refreshUser}\n        isLoggedIn={isLoggedIn}\n        userObj={userObj} /> : \"Initializing...\"}\n      <footer>&copy; Twitter Clone Coding {new Date().getFullYear()}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport firebase from './firebaseInstance';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}